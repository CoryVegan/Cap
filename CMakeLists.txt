CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8)

PROJECT(cap)

IF(NOT DEFINED DEAL_II_INSTALL_DIR)
    MESSAGE(FATAL_ERROR "\n"
        "You must pass a flag -DDEAL_II_INSTALL_DIR=/path/to/your/install\n"
        "to cmake.\n"
        )
ENDIF()
IF(NOT DEFINED CAP_DATA_DIR)
    MESSAGE(FATAL_ERROR "\n"
        "You must pass a flag -DCAP_DATA_DIR=/path/to/dir/with/meshes\n"
        "to cmake.\n"
        )
ENDIF()

INCLUDE_DIRECTORIES(include)

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY lib)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY lib)
ADD_LIBRARY(cap
    src/mp_values.cc
    src/boundary_values.cc
    src/dof_extractor.cc
    src/operator.cc
    src/thermal_operator.cc
    src/electrochemical_operator.cc
    src/post_processor.cc
    src/utils.cc
    src/energy_storage_device.cc
    src/resistor_capacitor.cc
    src/geometry.cc
    src/no_name.cc
    )

FIND_PACKAGE(deal.II 8.2 REQUIRED PATHS ${DEAL_II_INSTALL_DIR} NO_DEFAULT_PATH)
INCLUDE(${DEAL_II_TARGET_CONFIG})
INCLUDE_DIRECTORIES(SYSTEM ${DEAL_II_INCLUDE_DIRS})

SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a;.so")
IF(DEFINED TASMANIAN_INSTALL_DIR)
    MESSAGE("TASMANIAN_INSTALL_DIR = ${TASMANIAN_INSTALL_DIR}")
    FIND_LIBRARY(TASMANIAN_LIBRARIES
        NAMES tasmaniansparsegrid
        PATHS ${TASMANIAN_INSTALL_DIR}/lib
        NO_DEFAULT_PATH
        )
    FIND_PATH(TASMANIAN_INCLUDE_DIR tasmanian/TasmanianSparseGrid.hpp
        PATHS ${TASMANIAN_INSTALL_DIR}/include
        NO_DEFAULT_PATH
        )
    GET_FILENAME_COMPONENT(TASMANIAN_LIBRARY_DIR ${TASMANIAN_LIBRARIES} DIRECTORY)
    MESSAGE("TASMANIAN_LIBRARIES = ${TASMANIAN_LIBRARIES}")
    MESSAGE("TASMANIAN_INCLUDE_DIR = ${TASMANIAN_INCLUDE_DIR}")
    MESSAGE("TASMANIAN_LIBRARY_DIR = ${TASMANIAN_LIBRARY_DIR}")
    INCLUDE_DIRECTORIES(SYSTEM ${TASMANIAN_INCLUDE_DIR})
    LINK_DIRECTORIES(${TASMANIAN_LIBRARY_DIR})
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
    ADD_DEFINITIONS(-DWITH_TASMANIAN)
    SET(ENABLE_TASMANIAN ON)
ENDIF()

IF(DEFINED GSL_INSTALL_DIR)
    MESSAGE("GSL_INSTALL_DIR = ${GSL_INSTALL_DIR}")
    FIND_LIBRARY(GSL_LIBRARIES
        NAMES gsl
        PATHS ${GSL_INSTALL_DIR}/lib
        NO_DEFAULT_PATH
        )
    FIND_PATH(GSL_INCLUDE_DIR gsl/gsl_version.h
        PATHS ${GSL_INSTALL_DIR}/include
        NO_DEFAULT_PATH
        )
    GET_FILENAME_COMPONENT(GSL_LIBRARY_DIR ${GSL_LIBRARIES} DIRECTORY)
    MESSAGE("GSL_LIBRARIES = ${GSL_LIBRARIES}")
    MESSAGE("GSL_INCLUDE_DIR = ${GSL_INCLUDE_DIR}")
    MESSAGE("GSL_LIBRARY_DIR = ${GSL_LIBRARY_DIR}")
    INCLUDE_DIRECTORIES(SYSTEM ${GSL_INCLUDE_DIR})
    LINK_DIRECTORIES(${GSL_LIBRARY_DIR})
    SET(ENABLE_GSL ON)
ENDIF()

IF(DEFINED BOOST_INSTALL_DIR)
    MESSAGE("BOOST_INSTALL_DIR = ${BOOST_INSTALL_DIR}")
    FIND_LIBRARY(Boost_LIBRARIES 
        NAMES boost_unit_test_framework
        PATHS ${BOOST_INSTALL_DIR}/lib
        NO_DEFAULT_PATH
        )
    FIND_PATH(Boost_INCLUDE_DIR boost/version.hpp
        PATHS ${BOOST_INSTALL_DIR}/include
        NO_DEFAULT_PATH
        )
    SET(Boost_LIBRARY_DIR ${BOOST_INSTALL_DIR}/lib)
    MESSAGE("Boost_LIBRARIES = ${Boost_LIBRARIES}")
    MESSAGE("Boost_INCLUDE_DIR = ${Boost_INCLUDE_DIR}")
    MESSAGE("Boost_LIBRARY_DIR = ${Boost_LIBRARY_DIR}")
    INCLUDE_DIRECTORIES(SYSTEM ${Boost_INCLUDE_DIR})
    LINK_DIRECTORIES(${Boost_LIBRARY_DIR})
ENDIF()

ENABLE_TESTING()
ADD_SUBDIRECTORY(test)
IF(MAKE_DOC)
    ADD_SUBDIRECTORY(doc)
ENDIF()

INSTALL(TARGETS cap DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
INSTALL(DIRECTORY src/ 
    DESTINATION ${CMAKE_INSTALL_PREFIX}/include/cap
    FILES_MATCHING 
    PATTERN "*.h"
    PATTERN "*.templates.h" EXCLUDE
)

SET(CMAKE_EXPORT_COMPILE_COMMANDS 1)

